<?php
/**
 * Townsquare volunteer
 *
 * Includes core content types (volunteer_session), event editing interface,
 * and helper functions for interacting with volunteer hours.  Additional 
 * features can add organization specific displays for volunteer hours.
 */

include_once('townsquare_volunteer.features.inc');

/**
 * Implements hook_menu().
 */
function townsquare_volunteer_menu() {
  $items['event/create'] = array(
    'title' => 'Create event',
    'description' => 'Create event and volunteer sessions',
    'page callback' => 'townsquare_volunteer_edit_event',
    'access callback' => 'node_access',
    'access arguments' => array('create', 'event'),
    'type' => MENU_CALLBACK,
  );
  $items['event/%node'] = array(
    'title' => 'Edit event',
    'description' => 'Edit an event and volunteer sessions',
    'page callback' => 'townsquare_volunteer_edit_event',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function townsquare_volunteer_menu_alter(&$items) {
  // Rename user tasks
  $items['user/%user/view']['title'] = 'Profile';
  $items['user/%user/edit']['title'] = 'Settings';
}

/**
 * Implements hook_permission().
 */
function townsquare_volunteer_permission() {
  return array(
    'view own volunteer hours' => array(
      'title' => t('View own volunteer hours'),
      'description' => t('View one\'s own volunteer hours.'),
    ),
    'administer volunteer hours' => array(
      'title' => t('Administer volunteer hours'),
      'description' => t('View and administer everyone\'s volunteer hours.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function townsquare_volunteer_form_alter(&$form, &$form_state, $form_id) {
  // These handlers need to be added late, it seems
  if ($form_id == 'event_node_form' && arg(0) == 'event') {
    $form['actions']['submit']['#submit'][] = 'townsquare_volunteer_form_event_node_submit';
    $form['actions']['delete']['#submit'][] = 'townsquare_volunteer_form_event_node_delete';
  }
  if ($form_id == 'volunteer_session_node_form' && arg(0) == 'event') {
    $form['actions']['submit']['#submit'][] = 'townsquare_volunteer_volunteer_session_node_submit';
    $form['actions']['delete']['#submit'] = array('townsquare_volunteer_volunteer_session_delete_submit'); 
  } 
}  

/**
 * Implements hook_form_event_node_form_alter().
 */
function townsquare_volunteer_form_event_node_form_alter(&$form, &$form_state) {
  if (arg(0) == 'event') {
    // Bypass node validate
    $form['changed']['#default_value'] = time() + 3600;

    $event = $form['#node'];

    $form['#prefix'] = '<div id="event-form">';
    $form['#suffix'] = '</div>';

    // Disable title (handled in node_presave);
    $form['title']['#access'] = FALSE;
    $form['title']['#required'] = FALSE;

    if (empty($event->field_event_date['und'][0]['value']) && empty($event->field_event_date['und'][0]['value2'])) {
      $event_day = date_format(date_create(), 'Y-m-d');
      $tz = timezone_open($form['field_event_date']['und'][0]['#date_timezone']);
      // @TODO where to store defaults?
      $start = date_create($event_day .' '. variable_get('townsquare_volunteer_event_start', '11:00:00'), $tz);
      $end = date_create($event_day .' '. variable_get('townsquare_volunteer_event_end', '17:00:00'), $tz);
      date_timezone_set($start, timezone_open('UTC'));
      date_timezone_set($end, timezone_open('UTC'));
      $form['field_event_date']['und'][0]['#default_value']['value'] = date_format($start, 'Y-m-d H:i:s');
      $form['field_event_date']['und'][0]['#default_value']['value2'] = date_format($end, 'Y-m-d H:i:s');
    }

    // Strip out form elements
    foreach (array('menu', 'comment_settings', 'path', 'author', 'options', 'revision_information', 'node_privacy_byrole', 'additional_Settings', 'buttons') as $key) {
      $form[$key]['#access'] = FALSE;
    }

    // Customize location
    $form['field_event_location']['und'][0]['country']['#access'] = FALSE;
    $form['field_event_location']['und'][0]['street_block']['premise']['#access'] = FALSE;
    $form['field_event_location']['und'][0]['street_block']['thoroughfare']['#title'] = t('Address');
    $form['field_event_location']['und'][0]['name_block']['name_line']['#title'] = t('Venue');
    $form['field_event_location']['und'][0]['locality_block']['administrative_area']['#attributes']['class'][] = 'combobox';
    
    $form['actions']['preview']['#access'] = FALSE;
  }
}

/**
 * Submit/save callback for event editing form
 */
function townsquare_volunteer_form_event_node_submit($form, &$form_state) {
  // Alter redirect
  $form_state['redirect'] = 'event/'. $form_state['node']->nid .'/edit';
}

/**
 * Delete callback for event editing form
 */
function townsquare_volunteer_form_event_node_delete($form, &$form_state) {
  // @TODO cascade delete orphans, dangerous
}

/**
 * Implements hook_form_volunteer_session_node_form_alter().
 */
function townsquare_volunteer_form_volunteer_session_node_form_alter(&$form, &$form_state) {  

  // Add behaviors 
  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'townsquare_volunteer')
        .'/js/townsquare_volunteer-session-edit.js',
    ),
  );
  
  if (arg(0) == 'event' || arg(0) == 'system') {
    // Bypass node validate
    $form['changed']['#default_value'] = time() + 3600;

    $node = $form['#node'];
    $nid = (!empty($node->nid)) ? $node->nid : 'new';

    // Disable title (handled in node_presave);
    $form['title']['#access'] = FALSE;
    $form['title']['#required'] = FALSE;

    $form['#prefix'] = '<div class="volunteer-session-form" id="volunteer-session-form-'. $nid .'">';
    $form['#suffix'] = '</div>';
    
    $tree = array(
      'field_session_user' => array('target_id'),
      'field_session_hours' => array('value', 'value2'),
      'field_session_role' => array('tid'),
      'field_session_override_duration' => array('value'),
      'field_session_duration' => array('value'),
      'field_session_no_signout' => array('value'),
    );
    foreach ($tree as $field => $keys) {
      foreach ($keys as $key) {
        $form[$field]['#prefix'] = '<div class="townsquare-'. str_replace('_', '-', $field) .'-'. $key .'-element-wrapper">';
        $form[$field]['#suffix'] = '</div>';

        unset(
          $form[$field]['und']['#description'],
          $form[$field]['und'][0][$key]['#description']
        );
        
        if ($field != 'field_session_user' && $nid == 'new') {
          $form[$field]['#disabled'] = true;
        }
        else {
          $ajax = array(
            'event' => 'change',
            'wrapper' => 'volunteer-session-form-'. $nid,
            'callback' => 'townsquare_volunteer_session_ajax_callback',
          );
          if ($nid == 'new') {
            $ajax['effect'] = 'slide';
          }
          $form[$field]['und']['#ajax'] = $ajax;
          $form[$field]['und'][0][$key]['#ajax'] = $ajax;
        }
      }
    }

    // Bind AJAX to delete
    $form['actions']['delete']['#ajax'] = array(
      'callback' => 'townsquare_volunteer_volunteer_session_delete_submit',
      'effect' => 'fade',
      'wrapper' => 'volunteer-session-form-'. $nid,
    );

    // Unset default value if UID is 0 (dummy node)
    if ($form['field_session_user']['und'][0]['target_id']['#default_value'] == 'Anonymous (0)') {
      unset($form['field_session_user']['und'][0]['target_id']['#default_value']);
    }


    // Remove some fields
    foreach (array('menu', 'comment_settings', 'path', 'author', 'options', 'revision_information', 'additional_settings', 'buttons', 'field_session_event', 'field_session_rules_processed', 'field_session_processed_date') as $key) {
      $form[$key]['#access'] = FALSE;
    }

    // Remove buttons
    foreach (element_children($form['actions']) as $key) {
      $form['actions'][$key]['#type'] = 'button';
      switch($key) {
        case 'delete':
          $form['actions'][$key]['#button_text'] = t('<i class="icon-trash"></i><label> Delete session</label>');
          $form['actions'][$key]['#attributes']['title'] = t('Delete row');
          break;
        default:
          $form['actions'][$key]['#access'] = FALSE;
      }
    }

    // Add basic user link button (replace with image)  
    $form['actions']['user_link'] = array(
      '#type' => 'link',
      '#href' => 'user/'. $node->field_session_user['und'][0]['target_id'],
      '#title' => t('<i class="icon-user"></i>'),
      '#weight' => -10,
      '#options' => array(
        'html' => true,
        'attributes' => array(
          'class' => 'btn user-link',
          'target' => '_blank',
          'title' => t('View user details in new tab'),
        ),
      ),
    );
  }
}

/**
 * Submit callback for embedded volunteer session edting form
 */
function townsquare_volunteer_volunteer_session_node_submit($form, &$form_state) {
  // Alter redirect
  $form_state['redirect'] = 'event/'. $form_state['node']->field_session_event['und'][0]['nid'] .'/edit';
}

/**
 * AJAX submit callback for embedded volunteer session edting form
 */
function townsquare_volunteer_session_ajax_callback($form, $form_state) {
  $element = $form_state['triggering_element'];
  $node = $form_state['node'];

  $new = ($node->uid == 0) ? TRUE : FALSE;

  entity_form_submit_build_entity('node', $node, $form, $form_state);
  entity_save('node', $node);

  $form_state['rebuild'] = TRUE;
  $form = drupal_rebuild_form($form['#form_id'], $form_state, $form);

  // If new, rebuild whole form when user changes 
  if ($new && !empty($form_state['values']['field_session_user']['und'][0]['target_id'])) {
    // To create the new node form, we need to reset $_POST so that
    // drupal_build_form won't use it to populate $form_state['input']
    $_POST = array();
    $event_node = node_load($form['#node']->field_session_event['und'][0]['target_id']);
    $new_session = _townsquare_volunteer_create_volunteer_session($event_node);
    node_submit($new_session);
    node_save($new_session);
    $new_form = drupal_get_form('volunteer_session_node_form', $new_session);
    $commands[] = ajax_command_append('#volunteer-sessions', drupal_render($new_form));
  }
  else { 
    if ($element['#parents'][0] == 'field_session_hours') {
      $replace = '#volunteer-session-form-'. $node->nid .' .field-name-field-session-duration'; 
      $form['field_session_duration']['und'][0]['value']['#value'] = $form['field_session_duration']['und'][0]['value']['#default_value'];
      $commands[] = ajax_command_replace($replace, drupal_render($form['field_session_duration']));
    }
  }
  //$commands[] = ajax_command_prepend('#volunteer-sessions', theme('status_messages'));
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Volunteer session delete callback
 */
function townsquare_volunteer_volunteer_session_delete_submit($form, &$form_state) {
  $commands[] = ajax_command_replace('#volunteer-session-form-'. $form['#node']->nid, NULL);
  //$commands[] = ajax_command_append('#volunteer-sessions', theme('status_messages'));
  node_delete($form['#node']->nid);
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Implements hook_form_user_form_user_profile_form_alter().
 *
 * Disable email address validation if field is empty.
 */
function townsquare_volunteer_form_user_profile_form_alter(&$form, &$form_state) {
  $form['account']['mail']['#required'] = FALSE;
  $form['account']['pass']['#required'] = FALSE;
  
  $account_validator = array_search('user_account_form_validate', $form['#validate']);
  if ($account_validator !== FALSE) {
    $form['#validate'][$account_validator] = 'townsquare_volunteer_user_account_form_validate';
  }
}

/**
 * Implements hook_form_user_form_user_register_form_alter().
 *
 * Disable email address validation if user is admin.
 */
function townsquare_volunteer_form_user_register_form_alter(&$form, &$form_state) {
  if (user_access('administer users')) {
    townsquare_volunteer_form_user_profile_form_alter($form, $form_state);  
  }
}
/**
 * Validate callback to replace user_account_form_validate(). Only modification is
 * skipping email validation if field is empty.
 */
function townsquare_volunteer_user_account_form_validate($form, &$form_state) {
  if ($form['#user_category'] == 'account' || $form['#user_category'] == 'register') {
    $account = $form['#user'];
    // Validate new or changing username.
    if (isset($form_state['values']['name'])) {
      if ($error = user_validate_name($form_state['values']['name'])) {
        form_set_error('name', $error);
      }
      elseif ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->condition('name', db_like($form_state['values']['name']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
        form_set_error('name', t('The name %name is already taken.', array('%name' => $form_state['values']['name'])));
      }
    }

    // Trim whitespace from mail, to prevent confusing 'e-mail not valid'
    // warnings often caused by cutting and pasting.
    $mail = trim($form_state['values']['mail']);
    form_set_value($form['account']['mail'], $mail, $form_state);

    // Validate the e-mail address, and check if it is taken by an existing user.
    if (!empty($mail) && $error = user_validate_mail($form_state['values']['mail'])) {
      form_set_error('mail', $error);
    }
    elseif (!empty($mail) && (bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->condition('mail', db_like($form_state['values']['mail']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
      // Format error message dependent on whether the user is logged in or not.
      if ($GLOBALS['user']->uid) {
        form_set_error('mail', t('The e-mail address %email is already taken.', array('%email' => $form_state['values']['mail'])));
      }
      else {
        form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
      }
    }

    // Make sure the signature isn't longer than the size of the database field.
    // Signatures are disabled by default, so make sure it exists first.
    if (isset($form_state['values']['signature'])) {
      // Move text format for user signature into 'signature_format'.
      $form_state['values']['signature_format'] = $form_state['values']['signature']['format'];
      // Move text value for user signature into 'signature'.
      $form_state['values']['signature'] = $form_state['values']['signature']['value'];

      $user_schema = drupal_get_schema('users');
      if (drupal_strlen($form_state['values']['signature']) > $user_schema['fields']['signature']['length']) {
        form_set_error('signature', t('The signature is too long: it must be %max characters or less.', array('%max' => $user_schema['fields']['signature']['length'])));
      }
    }
  }
}

function townsquare_volunteer_init() {
  drupal_add_css(drupal_get_path('module', 'townsquare_volunteer') .'/css/townsquare-volunteer.css');
}

/**
 * Integrated, AJAXy form for event + session creation
 *
 * @param $node
 *   Event node object
 * @return
 *   Edit form(s)
 */
module_load_include('inc', 'node', 'node.pages');
function townsquare_volunteer_edit_event($node = NULL) {
  global $user;

  if ($node) {
    drupal_set_title('Edit '. $node->title);
  } else {
    drupal_set_title('Create event');
  }


  if ($node && $node->type != 'event') {
    return drupal_not_found();
  }

  $session_form = array();

  if (!$node) {
    $node = new stdClass();
    $node->type = 'event';
    $node->name = $user->name;
    $node->status = 1;
    $node->promote = 0;
    $node->sticky = 0;
    $node->language = 'und'; // @TODO make language selection more intelligent

    $summary = array();
  }
  else {
    $session_elements = array();
    $session_nodes = townsquare_volunteer_event_sessions($node->nid);

    $duration = 0;
    foreach ($session_nodes as $session) {
      if ($session->field_session_user['und'][0]['target_id'] != 0) {
        $duration += (float) $session->field_session_duration['und'][0]['value'];
      }
      if (node_access('update', $session)) {
        $session_elements[] = drupal_get_form('volunteer_session_node_form',
          $session);
      }
    }

    $last = array_pop($session_nodes);
    if (!count($session_nodes) || $last->field_session_user['und'][0]['target_id'] != 0) {
      $new_session = _townsquare_volunteer_create_volunteer_session($node);
      node_submit($new_session);
      node_save($new_session);
      $session_elements[] = drupal_get_form('volunteer_session_node_form', 
        $new_session);
    }

    $summary = array(
      '#prefix' => '<div class="clearfix">',
      '#suffix' => '</div>',
      '#theme' => 'table',
      '#rows' => array(
        array(
          array(
            'data' => t('Total attendance'),
            'header' => TRUE,
          ),
          array(
            'data' => count($session_nodes),
          ),
        ),
        array(
          array(
            'data' => t('Total hours'),
            'header' => TRUE,
          ),
          array(
            'data' => $duration,
          ),
        ),
      ),
    );


    if (!empty($session_elements)) {
      $session_form = array(
        '#name' => t('Volunteer sessions'),
        
        'sessions' => array(
          '#prefix' => '<div id="volunteer-sessions" class="clearfix">',
          '#suffix' => '</div>',
          'headers' => array(
            '#theme' => 'item_list',
            '#attributes' => array('id' => 'session-headers'),
            '#items' => array(
              array(
                'data' => t('Volunteer name'), 
                'class' => array('form-item', 'form-item-field-session-user-und-0-target-id'),
              ),
              array(
                'data' => t('Role'),
                'class' => array('form-item',),
              ),
              array(
                'data' => t('Start'), 
                'class' => array('form-item',),
              ),
              array(
                'data' => t('End'), 
                'class' => array('form-item',),
              ),
              array(
                'data' => t('Set duration'),
                'class' => array('form-item', 'form-type-checkbox'),
              ),
              array(
                'data' => t('Duration'),
                'class' => array('form-item',),
              ),
              array(
                'data' => t('No signout'),
                'class' => array('form-item', 'form-type-checkbox'),
              ),
              array(
                'data' => t('Actions'),
                'class' => array('form-item', 'form-actions'),
              ),
            ),
          ),
        ) + $session_elements,
      );
    }
  }
    
  $form = drupal_get_form('event_node_form', $node);
  $output = array(
    'event' => $form,
    'summary' => $summary,
    'sessions' => $session_form,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'townsquare_volunteer')
          .'/js/autocomplete.js'
      ),
    ),
  );
  
  return $output;
}

/**
 * Implements hook_node_presave().
 */
function townsquare_volunteer_node_presave($node) {
  $lang = LANGUAGE_NONE;

  if ($node->type == 'volunteer_session') { 
    $event = node_load($node->field_session_event[$lang][0]['target_id']);

    // Set session author to referenced user
    if (isset($node->field_session_user[$lang][0]['target_id']) && $user = user_load($node->field_session_user[$lang][0]['target_id'])) {
      $node->uid = $user->uid;
    }

    if (!empty($node->field_session_hours[$lang][0]['value'])) {
      $start = new DateObject($node->field_session_hours[$lang][0]['value']);
    } 
    if (!empty($node->field_session_hours[$lang][0]['value2'])) {
      $end = new DateObject($node->field_session_hours[$lang][0]['value2']);
    } 
    if (isset($start) && isset($end)) {
      $start_timestamp = date_format($start, 'U'); 
      $end_timestamp = date_format($end, 'U'); 
      $elapsed = ($end_timestamp - $start_timestamp) / 3600;
      $node->field_session_duration[$lang][0]['value'] = $elapsed;  
      $date = ' - '. $start->format('g:ia') .' to '. $end->format('g:ia');
      $node->title = $event->title .' '. $date .' ('.
        sprintf("%.2f", $node->field_session_duration[$lang][0]['value']) .' hours)';
    }
    else {
      $node->title = 'Empty session';
    }
  }

  if ($node->type == 'event') { 
    $title_suffix = '';
    $start = new DateObject($node->field_event_date[$lang][0]['value']);
    if (!empty($node->field_event_type[$lang][0]['tid'])) {
      $term = taxonomy_term_load($node->field_event_type[$lang][0]['tid']);
      $title_suffix = ' - '. $term->name;
    }
    $node->title = $start->format('Y-m-d') . $title_suffix;
  }
}

/**
 * Get sessions for a given event
 *
 * @param $nid
 *   Event object node ID
 * @return
 *   array of volunteer session node objects
 *  
 */
function townsquare_volunteer_event_sessions($nid) {
  static $sessions;
  if (empty($sessions[$nid])) {
    $results = array();
    $duration_query = new EntityFieldQuery;
    $date_query = new EntityFieldQuery;
    $dummy_query = new EntityFieldQuery;

    $duration_query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'volunteer_session')
      ->fieldCondition('field_session_event', 'target_id', $nid, '=')
      ->fieldCondition('field_session_override_duration', 'value', 1, '=')
      ->fieldCondition('field_session_user', 'target_id', 0, '!=')
      ->fieldOrderBy('field_session_duration', 'value', 'ASC');

    $duration_result = $duration_query->execute();
    
    if ($duration_result) {
      $results += entity_load('node', array_keys($duration_result['node']));
    }

    $date_query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'volunteer_session')
      ->fieldCondition('field_session_event', 'target_id', $nid, '=')
      ->fieldCondition('field_session_override_duration', 'value', 0, '=')
      ->fieldCondition('field_session_user', 'target_id', 0, '!=')
      ->fieldOrderBy('field_session_hours', 'value', 'ASC')
      ->fieldOrderBy('field_session_hours', 'value2', 'ASC');
    
    $date_result = $date_query->execute();

    if ($date_result) {
      $results += entity_load('node', array_keys($date_result['node']));
    }

    $dummy_query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'volunteer_session')
      ->fieldCondition('field_session_event', 'target_id', $nid, '=')
      ->fieldCondition('field_session_user', 'target_id', 0, '=');

    $dummy_result = $dummy_query->execute();
    
    if ($dummy_result) {
      $results += entity_load('node', array_keys($dummy_result['node']));
    }

    $sessions[$nid] = $results;
  }

  return $sessions[$nid];
}

/**
 * Get volunteer sessions over a given span of time.
 *
 * @param $users
 *   An array of uids
 * @param $start
 *   (optional) Start time (default: all sessions)
 * @param $end
 *   (optional) End time (default: now)
 * @return
 *   array of volunteer session node objects
 */ 

function townsquare_volunteer_volunteer_sessions($users = array(), $start = NULL, $end = NULL) {
  $query = new EntityFieldQuery;

  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->fieldCondition('field_session_user', 'target_id', $users, 'in');

  if ($start) {
    $query->fieldCondition('field_session_hours', 'value', $start, '>=', 0);
  }
  if ($end) {
    $query->fieldCondition('field_session_hours', 'value2', $end, '<=', 0);
  }

  $result = $query->execute();
  
  if ($result) {
    return entity_load('node', array_keys($result['node']));
  }  
  return array();
}

/**
 * Get sessions for a given user
 *
 * @param $uid
 *   uid of user to retrieve sessions for
 * @return
 *   array of volunteer session node objects
 */
function townsquare_volunteer_user_sessions($uid) {
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->fieldCondition('field_session_user', 'target_id', $uid, '=');
  $result = $query->execute();
  
  if ($result) {
    return entity_load('node', array_keys($result['node']));
  } 
  return array();
}

/**
 * Create a new volunteer session node object with dates and parent NID set 
 * based on event node passed as parameter.
 *
 * @param $node
 *   A node of type 'event'
 * @return
 *   A volunteer session node object
 */
function _townsquare_volunteer_create_volunteer_session($node) {
  global $user;
  if ($node->type == 'event') {
    $empty_session = new stdClass();
    $empty_session->type = 'volunteer_session';
    node_object_prepare($empty_session);

    $empty_session->title = 'Empty session';
    $empty_session->name = $user->name;
    $empty_session->status = 0;
    $empty_session->promote = 0;
    $empty_session->sticky = 0;
    $empty_session->language = LANGUAGE_NONE;
    $empty_session->field_session_user = array(
      'und' => array(
        array('target_id' => 0),
      )
    );
    $empty_session->field_session_event = array(
      'und' => array(
        array('target_id' => $node->nid),
      )
    );
    $empty_session->field_session_override_duration = array(
      'und' => array(
        array('value' => 0)
      )
    );
    $empty_session->field_session_duration = array(
      'und' => array(
        array('value' => 6)
      )
    );
    return $empty_session; 
  }
}

// Widget!

/**
 * Implements hook_field_widget_info().
 */
function townsquare_volunteer_field_widget_info() {
  return array(
    'townsquare_session_date' => array(
      'label' => t('Townsquare session date'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function townsquare_volunteer_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field_name = $field['field_name'];
  $field_type = $field['type'];

  if ($instance['widget']['type'] == 'townsquare_session_date' && isset($form['#node']->field_session_event[$langcode][0]['target_id']) && $event = node_load($form['#node']->field_session_event[$langcode][0]['target_id'])) {

    $tz_db = timezone_open($event->field_event_date['und'][0]['timezone_db']);
    $tz = timezone_open($event->field_event_date['und'][0]['timezone']);
    
    $start = new DateObject($event->field_event_date['und'][0]['value'], $tz_db);
    $start->setTimezone($tz);

    $end = new DateObject($event->field_event_date['und'][0]['value2'], $tz_db);
    $end->setTimezone($tz);
    
    $options = _townsquare_volunteer_date_options($start, $end);
    foreach ($field['columns'] as $col => $values) {
      if (!isset($items[$delta][$col])) {
        $default = new DateObject($event->field_event_date['und'][0][$col], $tz_db);
      }
      else {
        $default = new DateObject($items[$delta][$col], $tz_db);
      }
      // Create select element with options populated by special function 
      $element[$col] = array(
        '#type' => 'select',
        '#title' => $element['#title'],
        '#description' => $element['#description'],
        '#options' => $options,
        '#default_value' => $default->format('Y-m-d H:i:s'),
        '#attributes' => array('class' => array('combobox')),
      );
    }
  }
  return $element;
}

/**
 * Create date options
 *
 * Makes timezone adjustment based on event timezone.
 *
 * @param event_date
 *   Parent event DateObject.
 */
function _townsquare_volunteer_date_options($start, $end) {
  $start->modify('-2 hours');
  $end->modify('+2 hours');
  $utc = clone $start;
  $utc->setTimezone(timezone_open('UTC'));  
  $options = array();
  while ($start <= $end) {
    $options[$utc->format('Y-m-d H:i:s')] = $start->format('g:ia');
    $start->modify('+15 minutes');
    $utc->modify('+15 minutes');
  }
  return $options;
}
