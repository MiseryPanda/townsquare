<?php
/**
 * @file
 */
define('FREEGEEK_PROGRAM_COMPLETION_HOURS', 24);
define('FREEGEEK_PROGRAM_COMPLETION_CREDIT', 75);
define('FREEGEEK_MAXIMUM_CREDIT', 150);
define('FREEGEEK_PROCESSING_OFFSET', 0);

function freegeek_townsquare_rules_rules_event_info() {
  $items = array(
    // An event invoked for every volunteer record processed
    'freegeek_townsquare_rules_process_sessions' => array(
        'label' => t('After processing a volunteer\'s recent participation'),
        'variables' => array(
          'account' => array(
            'type' => 'user',
            'label' => t('User'),
          ),
          'hours_old' => array(
            'type' => 'decimal',
            'label' => t('Old hours'),
          ),
          'hours_new' => array(
            'type' => 'decimal',
            'label' => t('New hours'),
          ),
          'hours_difference' => array(
            'type' => 'decimal',
            'label' => t('Difference'),
          ),
       ),
       'group' => t('Townsquare'),
     ),
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function freegeek_townsquare_rules_init() {
  // Get all recently updated volunteer sessions, then generate
  // a data structure reflecting new and old hours for all volunteers
  // with recent activity.
  $max_hours = FREEGEEK_PROGRAM_COMPLETION_HOURS + FREEGEEK_PROGRAM_COMPLETION_CREDIT;
  $start = time() - FREEGEEK_PROCESSING_OFFSET;
  $end = variable_get('cron_last') - FREEGEEK_PROCESSING_OFFSET;
  
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->propertyCondition('changed', $start, '<')
    ->propertyCondition('changed', $end, '>');
  $result = $query->execute();
  if ($result) {
    $sessions = entity_load('node', array_keys($result['node']));

    // Calculate each user's new and old hours
    // @TODO use proper uid field
    $durations = array();
    foreach ($sessions as $nid => $session) {
      if ($session->uid > 0) {
        if (!isset($durations[$session->uid])) {
          $durations[$session->uid] = array(
            'old' => 0,
            'new' => 0,
          );
        }
        $durations[$session->uid]['new'] += $session->field_session_duration['und'][0]['value'];

        $old_query = new EntityfieldQuery;
        $old_query
          ->entityCondition('entity_type', 'node')
          ->propertyCondition('type', 'volunteer_session')
          ->propertyCondition('uid', $session->uid, '=')
          ->propertyCondition('changed', $end, '<');
        $old_result = $old_query->execute();

        if ($old_result) {
          $old_sessions = entity_load('node', array_keys($old_result['node']));
          foreach ($old_sessions as $old_session) {
            $old_session_duration = field_get_items('node', $old_session, 'field_session_duration');
            $old_session_hours = field_get_items('node', $old_session, 'field_session_hours');
            $old_session_date = date_create($old_session_hours[0]['value'], timezone_open($old_session_hours[0]['timezone']));
            $year = $old_session_date->format('Y');
            if (!isset($durations[$session->uid]['by_year'][$year])) {
              $durations[$session->uid]['by_year'][$year] = 0;
            }
            $durations[$session->uid]['old'] += $old_session_duration[0]['value'];
            $durations[$session->uid]['new'] += $old_session_duration[0]['value'];
            $durations[$session->uid]['by_year'][$year]['old'] += $old_session_duration[0]['value'];
          }
        }
      }
    }
    dpm($durations);
    return;
    // Process credit. There might be better ways to do this using Drupal
    // rules module, but the logic is quite specific and complex. If an
    // implementer's use case is roughly similar to FreeGeek, they can 
    // redefine the constants.
    foreach ($durations as $uid => $hours) {
      $user = user_load($uid);
      $last_processed = field_get_items('user', $user, 'field_freegeek_last_processed');
      $credit = field_get_items('user', $user, 'field_freegeek_volunteer_credit');

      $difference = $hours['new'] - $hours['old'];

      // Program completion: 75 bucks plus any extra hours
      if ($hours['old'] < FREEGEEK_PROGRAM_COMPLETION_HOURS && $hours['new'] >= FREEGEEK_PROGRAM_COMPLETION_HOURS) {
        $user->field_freegeek_volunteer_credit['und'][0]['value'] = FREEGEEK_PROGRAM_COMPLETION_CREDIT + ($hours['new'] - FREEGEEK_PROGRAM_COMPLETION_HOURS);
      }
      // Under maximum cap
      else if ($hours['old'] > FREEGEEK_PROGRAM_COMPLETION_HOURS && $hours['old'] <= $max_hours) {
        $user->field_freegeek_volunteer_credit['und'][0]['value'] += $difference;
        if ($user->field_freegeek_volunteer_credit['und'][0]['value'] > FREEGEEK_MAXIMUM_CREDIT) {
          $user->field_freegeek_volunteer_credit['und'][0]['value'] = FREEGEEK_MAXIMUM_CREDIT;
        }  
      }
      user_save($user);
      rules_invoke_event('freegeek_townsquare_rules_process_sessions', $user, $hours['old'], $hours['new'], $difference);
    }
  } 
}
