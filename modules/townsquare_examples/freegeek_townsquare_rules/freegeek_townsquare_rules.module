<?php
/**
 * @file
 */
define('FREEGEEK_PROCESSING_OFFSET', 0);

function freegeek_townsquare_rules_rules_event_info() {
  $items = array(
    // An event invoked for every volunteer record processed
    'freegeek_townsquare_rules_process_sessions' => array(
        'label' => t('After processing a volunteer\'s recent participation'),
        'variables' => array(
          'account' => array(
            'type' => 'user',
            'label' => t('User'),
          ),
          'hours_old' => array(
            'type' => 'decimal',
            'label' => t('Old hours'),
          ),
          'hours_new' => array(
            'type' => 'decimal',
            'label' => t('New hours'),
          ),
          'hours_difference' => array(
            'type' => 'decimal',
            'label' => t('Difference'),
          ),
       ),
       'group' => t('Townsquare'),
     ),
  );
  return $items;
}


/** 
 * Process volunteer hours...
 *
 * Get all recently updated sessions and group by user 
 * Get users and calculate last year's hours up to updated date
     * Last year calculation: If start day + current year > current date, use start day + past year
     * Don't forget First year status (e.g. program completion)
 * Assign perks
 */

/**
 * Initialize durations array and populate with latest sessions
 */
function _freegeek_townsquare_rules_get_new_sessions(&$durations) {
  $end = time() - FREEGEEK_PROCESSING_OFFSET;
  $start = variable_get('cron_last') - FREEGEEK_PROCESSING_OFFSET;
  
  $query = new entityfieldquery;
  $query
    ->entitycondition('entity_type', 'node')
    ->propertycondition('type', 'volunteer_session')
    ->propertycondition('changed', $start, '>')
    ->propertycondition('changed', $end, '<')
    ->fieldOrderBy('field_session_hours', 'value', 'ASC');

  $result = $query->execute();

  $first = TRUE;
  if ($result) {
    $sessions = entity_load('node', array_keys($result['node']));
    foreach ($sessions as $nid => $session) {
      if (!$session->uid) {
        break; // @TODO factor into query
      }
      $session_uids = field_get_items('node', $session, 'field_session_user');
      $session_uid = $session_uids[0]['target_id'];
      if (!isset($durations[$session_uid])) {
        $durations[$session_uid] = array(
          'new' => 0,
          'old' => 0,
        ); 
      }
      $date = field_get_items('node', $session, 'field_session_hours');
      if ($first && $date[0]['value']) {
        $durations[$session_uid]['original_start_date'] = new DateTime($date[0]['value']);
        $first = FALSE;
      }
      $session_duration = field_get_items('node', $session, 'field_session_duration');
      $durations[$session_uid]['new'] += $session_duration[0]['value'];
    }
  }
}

/**
 * Calculate dates for querying and first year status
 */
function _freegeek_townsquare_rules_calculate_dates(&$durations) {
  $last_year = new DateTime();
  $last_year->modify('-1 years'); 
  foreach ($durations as $uid=>$duration) {
    $durations[$uid]['first_year'] = ($duration['original_start_date'] > $last_year) ? TRUE : FALSE;
  }
}

/**
 * For a list of users with new sessions, calculate their last year's hours.
 */
function _freegeek_townsquare_rules_get_old_sessions(&$durations) {
  $end = variable_get('cron_last') - FREEGEEK_PROCESSING_OFFSET;
  $end_date = new DateTime(date('Y-m-d H:i:s', $end));
  $query_end = date_format($end_date, 'Y-m-d H:i:s');

  foreach ($durations as $uid=>$row) {
    $sessions = townsquare_volunteer_volunteer_sessions(array($uid), '0000-00-00 00:00:00', $query_end);
    $first = TRUE;
    foreach ($sessions as $session) {
      $date = field_get_items('node', $session, 'field_session_hours');
      if ($first && $date[0]['value']) {
        $durations[$uid]['original_start_date'] = new DateTime($date[0]['value']);
        $first = FALSE;
      }
      $session_duration = field_get_items('node', $session, 'field_session_duration');
      $durations[$uid]['old'] += $session_duration[0]['value'];
    }
  }
}

/**
 * Apply credit to user sessions
 */
function _freegeek_townsquare_rules_process_rewards(&$durations) {
  foreach ($durations as $uid=>$row) {
    $user = user_load($uid);
 
    if (!empty($user->field_freegeek_rewards['und'][0]['value'])) {
      $rewards = $user->field_freegeek_rewards['und'][0]['value'];
    } 
    else {
      $rewards = 0;
    }

    // Initial rewards = $75 + ($1/hr * (new_hours - 24 hours))
    if ($row['first_year'] && $row['old'] <= 24 && ($row['old'] + $row['new']) >= 24) {
      $rewards = 75 + ($row['old'] + $row['new'] - 24);
    }
    // Otherwise add credit based on # of hours 
    else if ( ($row['first_year'] && $row['old'] < 100 && $row['new'] >= 24) ||
              (!$row['first_year'] && $row['old'] < 75) ) {
      $rewards = $user->field_freegeek_rewards['und'][0]['value'] + $row['new'];
    }

    // Upper cap of $150
    $rewards = ($rewards > 150) ? 150 : $rewards;

    $user->field_freegeek_rewards['und'][0]['value'] = floor($rewards);
    entity_save('user', $user);
    //user_save($user);

    //rules_invoke_event('freegeek_townsquare_rules_process_sessions', $user, 
    //  $row['old'], $row['old'] + $row['new'], $row['new']);
  }
}

/**
 * Implements hook_cron().
 */
function freegeek_townsquare_rules_cron() {
  $durations = array();
  _freegeek_townsquare_rules_get_new_sessions($durations);
  _freegeek_townsquare_rules_get_old_sessions($durations); 
  _freegeek_townsquare_rules_calculate_dates($durations); 
  _freegeek_townsquare_rules_process_rewards($durations); 
}
