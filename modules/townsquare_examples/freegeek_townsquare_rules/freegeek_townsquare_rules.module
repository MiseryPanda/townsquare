<?php
/**
 * @file
 */
define('FREEGEEK_PROGRAM_COMPLETION_HOURS', 10);
define('FREEGEEK_PROGRAM_COMPLETION_CREDIT', 75);
define('FREEGEEK_MAX_YEARLY_HOURS', 75);
define('FREEGEEK_MAXIMUM_CREDIT', 150);
define('FREEGEEK_PROCESSING_OFFSET', 0);

function freegeek_townsquare_rules_rules_event_info() {
  $items = array(
    // An event invoked for every volunteer record processed
    'freegeek_townsquare_rules_process_sessions' => array(
        'label' => t('After processing a volunteer\'s recent participation'),
        'variables' => array(
          'account' => array(
            'type' => 'user',
            'label' => t('User'),
          ),
          'hours_old' => array(
            'type' => 'decimal',
            'label' => t('Old hours'),
          ),
          'hours_new' => array(
            'type' => 'decimal',
            'label' => t('New hours'),
          ),
          'hours_difference' => array(
            'type' => 'decimal',
            'label' => t('Difference'),
          ),
       ),
       'group' => t('Townsquare'),
     ),
  );
  return $items;
}


/** 
 * Process volunteer hours...
 *
 * Get all recently updated sessions and group by user 
 * Get users and calculate last year's hours up to updated date
     * Last year calculation: If start day + current year > current date, use start day + past year
     * Don't forget First year status (e.g. program completion)
 * Assign perks
 */

function _freegeek_townsquare_rules_get_new_sessions(&$durations) {
  $end = time() - FREEGEEK_PROCESSING_OFFSET;
  $start = variable_get('cron_last') - FREEGEEK_PROCESSING_OFFSET;
  
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->propertyCondition('changed', $start, '>')
    ->propertyCondition('changed', $end, '<');
  $result = $query->execute();

  if ($result) {
    $sessions = entity_load('node', array_keys($result['node']));
    foreach ($sessions as $nid => $session) {
      if (!$session->uid) {
        break;
      }
      $session_uids = field_get_items('node', $session, 'field_session_user');
      $session_uid = $session_uids[0]['target_id'];

      if (!isset($durations[$session_uid])) {
        $durations[$session_uid]['new'] = 0; 
      }
      $session_duration = field_get_items('node', $session, 'field_session_duration');
      $durations[$session_uid]['new'] += $session_duration[0]['value'];
    }
  }
}

function _freegeek_townsquare_rules_get_old_sessions(&$durations) {
  $end = variable_get('cron_last') - FREEGEEK_PROCESSING_OFFSET;
  $end_date = new DateTime(date('Y-m-d H:i:s', $end));
  $query_end = date_format($end_date, 'Y-m-d H:i:s');

  foreach ($durations as $uid=>$row) {
    $query_start = date_format($row['start'], 'Y-m-d H:i:s');
    $sessions = townsquare_volunteer_volunteer_sessions(array($uid), $query_start, $query_end);
    dpm($sessions);
  }

  /*foreach ($durations as $uid=>$duration) {
    dpm($duration, $uid);
    $query = new EntityFieldQuery;
    $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'volunteer_session')
      ->propertyCondition('uid', $uid, '=')
      ->propertyCondition('changed', date_format('U', $duration['start']), '>')
      ->propertyCondition('changed', date_format('U', $end), '<');
      //->propertyCondition('changed', $durations, '>');

    $result = $query->execute();

    if ($result) {
      $sessions = entity_load('node', array_keys($result['node']));
      dpm($sessions);
      foreach ($sessions as $nid => $session) {
        if (!$session->uid) {
          break;
        }
        $session_uids = field_get_items('node', $session, 'field_session_user');
        $session_uid = $session_uids[0]['target_id'];

        if (!isset($durations[$session_uid])) {
          $durations[$session_uid]['new'] = 0; 
        }
        $session_duration = field_get_items('node', $session, 'field_session_duration');
        $durations[$session_uid]['new'] += $session_duration[0]['value'];
      }
    }
  }*/
}

function _freegeek_townsquare_rules_calculate_dates(&$durations) {
  $users = user_load_multiple(array_keys($durations));
  $now = new DateTime();
  $now_last_year = $now;
  $now_last_year = $now_last_year->modify('-1 years'); 
  $current_year = (int) date_format($now, 'Y');
  foreach ($users as $user) {
    $uid = $user->uid;
    $original_start_date = new DateTime(date('Y-m-d H:i:s', $user->created));
    $start_day = date_format($original_start_date, '-m-d H:i:s');
    $last_year_start_date = new DateTime($current_year . $start_day);
    if ($last_year_start_date > $now) {
      $last_year = $current_year - 1;
      $last_year_start_date = new DateTime($last_year . $start_day);
    }
    $durations[$uid]['start'] = $last_year_start_date;
    $durations[$uid]['first_year'] = ($original_start_date > $now_last_year) ? TRUE : FALSE;
  }
}

/**
 * Implements hook_cron().
 */
function freegeek_townsquare_rules_init() {

  $durations = array();
  _freegeek_townsquare_rules_get_new_sessions($durations);
  _freegeek_townsquare_rules_calculate_dates($durations); 
  _freegeek_townsquare_rules_get_old_sessions($durations); 
  dpm($durations);
     // Process credit. There might be better ways to do this using Drupal
    // rules module, but the logic is quite specific and complex. If an
    // implementer's use case is roughly similar to FreeGeek, they can 
    // redefine the constants.

    // Get current year
          // Program completion: 75 bucks plus any extra hours
    /*  if ($first_year && $hours_by_year[$current_year]['old'] < FREEGEEK_PROGRAM_COMPLETION_HOURS 
        && $hours_by_year[$current_year]['new'] >= FREEGEEK_PROGRAM_COMPLETION_HOURS) {

        $user->field_freegeek_volunteer_credit['und'][0]['value'] = 
          FREEGEEK_PROGRAM_COMPLETION_CREDIT + ($hours_by_year[$current_year]['new'] - FREEGEEK_PROGRAM_COMPLETION_HOURS);

        dpm($user->field_freegeek_volunteer_credit['und'][0]['value'], $user->name);
      }

      if (($first_year && $hours_by_year[$current_year]['old'] >= FREEGEEK_PROGRAM_COMPLETION_HOURS) || !$first_year) {
        $credit += $difference;
        if ($credit > FREEGEEK_MAXIMUM_CREDIT) { 
          $user->field_freegeek_volunteer_credit['und'][0]['value'] = MAXIMUM_CREDIT;
        }
        else {
          $user->field_freegeek_volunteer_credit['und'][0]['value'] = $credit;
        } 
      }*/

      //user_save($user);
      //rules_invoke_event('freegeek_townsquare_rules_process_sessions', $user, $hours['old'], $hours['new'], $difference);
}
