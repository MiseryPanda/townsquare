<?php
/**
 * @file
 */

function freegeek_townsquare_rules_cron() {
  dpm('cron ran!');
}

function freegeek_townsquare_rules_rules_event_info() {
  $items = array(
    'freegeek_process_sessions' => array(
       'variables' => array(
         'totals' => array(
           'type' => 'data',
           'label' => t('Totals'),
         ),
         'account' => array(
           'type' => 'user',
           'label' => t('User'),
         ),
       ),
       'group' => t('Townsquare'),
     ),
  );
  return $items;
}

function freegeek_townsquare_rules_process_sessions($totals) {
  dpm('called!');
  dpm($totals);
}

function freegeek_townsquare_rules_rules_condition_info() {
  return array();
}

/**
 * implementation of hook_rules_condition_info()
 */
function freegeek_townsquare_rules_condition_info() {
  return array(
    'freegeek_townsquare_rules_condition_hours' => array(
      'label' => t('Hours'),
      'arguments' => array(
        'hours' => array('type' => 'value', 'label' => t('Hours')),
      ),
      'module' => 'freegeek_townsquare_rules',
    ),
  );
}

/**
 * Condition packages_condition_packagetype
 */
function freegeek_townsquare_rules_condition_hours($hours) {
  return true;
  //$package = package_load($pid);
  
  //return ($package->type == $type) ? true : false;
}

function freegeek_townsquare_rules_init() {
  //dpm('run cron...');
  //drupal_cron_run();

  $start = time();
  $end = $start - 3600;
  $end = 0;
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->propertyCondition('changed', $start, '<')
    ->propertyCondition('changed', $end, '>');

  $result = $query->execute();
  if ($result) {
    $sessions = entity_load('node', array_keys($result['node']));
    $durations = array();
    foreach ($sessions as $nid => $session) {
      if ($session->uid) {
        if (!isset($durations[$session->uid])) {
          $durations[$session->uid] = array(
            'old' => 0,
            'new' => 0,
          );
        }
        $durations[$session->uid]['new'] += $session->field_session_duration['und'][0]['value'];

        $old_query = new EntityfieldQuery;
        $old_query
          ->entityCondition('entity_type', 'node')
          ->propertyCondition('type', 'volunteer_session')
          ->propertyCondition('uid', $session->uid, '=')
          ->propertyCondition('changed', $end, '<');
        $old_result = $old_query->execute();
        if ($old_result) {
          $old_sessions = entity_load('node', array_keys($old_result['node']));
          foreach ($old_sessions as $old_session) {
            $durations[$session->uid]['old'] += $old_session->field_session_duration['und'][0]['value'];
            $durations[$session->uid]['new'] += $old_session->field_session_duration['und'][0]['value'];
          }
        }
      }
    }

    dpm($durations);
    foreach ($durations as $uid => $hours) {
      // Fire a rules action with variables?!
      //dpm($hours);
      //dpm('invoking event');
      rules_invoke_event('freegeek_townsquare_rules_process_sessions', $hours, $uid);
      $user = user_load(array($uid));
      rules_invoke_event('user_insert', $user, $hours);
    }
  } 
}

